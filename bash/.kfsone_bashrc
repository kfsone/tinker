##############################################################################
# Oliver's various bash fragments.
#

##############################################################################
# Report an error to stderr.
#
function error ()
{
    echo >&2 "ERROR: $*"
}

##############################################################################
# Report an error to stderr and exit.
#
function die ()
{
    error $*
    exit 42
}

##############################################################################
# Report a warning to stderr.
#
function warn ()
{
    echo >&2 "WARNING: $*"
}

##############################################################################
# Present a minor warning to stderr above default verbosity.
#
function minor ()
{
    if [ ${DEBUG:-0} -gt 0 ]; then
        echo >&2 "MINOR: $*"
    fi
}

##############################################################################
# Report a status message to stdout except in quiet mode.
#
function status()
{
    if [ ${DEBUG:-0} -ge 0 ]; then
        echo >&1 "-- $*"
    fi
}

##############################################################################
# Report informational message if DEBUG is set to something > 0
#
function info ()
{
    if [ ${DEBUG:-0} -gt 0 ]; then
        echo >&1 "INFO: $*"
    fi
}

##############################################################################
# Report informational message only if DEBUG is set to > 1
#
function note ()
{
    if [ ${DEBUG:-0} -gt 1 ]; then
        echo "NOTE: $*"
    fi
}

##############################################################################
# Internal reporting at higher debug levels (> 2)
#
function debug ()
{
    if [ ${DEBUG:-0} -gt 2 ]; then
        echo "# $*"
    fi
}

##############################################################################
# Spammy reporting at debug levels > 3
#
function spam ()
{
    if [ ${DEBUG:-0} -gt 3 ]; then
        echo "## $*"
    fi
}

##############################################################################
# Report a positive progress event to stdout, except in quiet mode.
#
function success ()
{
	if [ ${DEBUG:-0} -ge 0 ]; then
		echo "SUCCESS: $*"
	fi
}

##############################################################################
# Report a fail condition to stdout, except in quiet mode.
#
function failed ()
{
	if [ ${DEBUG:-0} -ge 0 ]; then
		echo "FAILED: $*"
	fi
}

##############################################################################
# Add paths to the PATH only if they exist and without duplication.
#
function add_paths ()
{
	local new_path="${PATH}"

    for path in $*; do

        if [ ! -e "$path" ]; then
            # Don't add paths that don't exist.
            minor "add_paths: $path: Skipping: Does not exist."

        else
            if [[ "${new_path}" =~ (^|:)${path}/?($|:) ]]; then
                minor "add_paths: $path: Skipping: already in PATH."

            else
                if [ -z "${new_path}" ]; then
                    export PATH="${path}"
                else
                    export PATH="${new_path}:${path}"
                fi

                note "add_paths: $path: Added."
            fi
        fi

    done

	if [ "${new_path}" != "${PATH}" ]; then
		debug "add_paths: Exporting new PATH: ${new_path}"
		export PATH="${new_path}"
    fi
}

##############################################################################
# Test if a file exists and is readable, and then source it.
# Shortcut for if [ -f $P -a -r $P ]; then . $P; fi
#
function source_if_exists ()
{
    local shfrag="${1:-}"
    if [ -z "${shfrag}" -o -n "${2:-}" ]; then
        error "source_if_exists: takes one argument (frag name)"
        return 1
    fi

    if [ -f "${shfrag}" -a -r "${shfrag}" ]; then
        debug "source_if_exists: source ${shfrag}"
        source "${shfrag}"
    else
        debug "source_if_exists: ${shfrag}: does not exist."
    fi
    return 0
}

##############################################################################
# Common settings
#

# I like a lot of history.
if [ ${HISTFILESIZE:-0} -lt 100000 ]; then
	export HISTFILESIZE=100000
fi
if [ ${HISTSIZE:-0} -lt 50000 ]; then
	export HISTSIZE=50000
fi
# append to history instead of overwriting.
shopt -s histappend
# don't put duplicate lines or lines start with space in history.
export HISTCONTROL=ignoreboth
# resize the window after every command
shopt -s checkwinsize

# My most common paths.
add_paths "${HOME}/bin" "${HOME}/.local/bin"
add_paths "${HOME}/Development/arcanist/bin"
if [ -n "${GOPATH}" ]; then add_paths "${GOPATH}/bin"; fi

export EDITOR="vim" SVN_EDITOR="vim"

# If powerline is installed, lets turn it on.
if [ -n "$(which powerline)" ]; then
	if [ -e "/usr/share/powerline" ]; then
		export POWERLINE_ROOT="/usr/share/powerline"
	fi

	if [ -n "${POWERLINE_ROOT:-}" ]; then
		# Start the prompt daemon
		powerline-daemon -q

		# Config
		POWERLINE_BASH_CONTINUATION=1
		POWERLINE_BASH_SEKECT=1

		# Source the integration
		. "${POWERLINE_ROOT}/bindings/bash/powerline.sh"
	fi
fi

